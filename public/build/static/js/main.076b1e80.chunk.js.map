{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","Launches","LAUNCHES_QUERY","gql","query","res","loading","error","data","style","background","width","height","dark","console","log","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","rocket","launch_year","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,gPCwB5BC,EAnBI,SAAC,GAAgF,IAAD,IAA9EC,OAASC,EAAqE,EAArEA,cAAeC,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,kBAAmBC,EAAqB,EAArBA,eAC1E,OACI,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,6CAAkB,0BAAMA,UAAWC,IAAW,CAC1C,eAAgBF,EAChB,eAAeA,KACdF,IACL,oCAAS,kBAAC,IAAD,CAAQK,OAAO,oBAAoBJ,KAEhD,yBAAKE,UAAU,YACX,kBAAC,IAAD,CAAMG,GAAE,kBAAaP,GAAiBI,UAAU,qBAAhD,sBCFLI,EAbI,WACf,OACI,yBAAKJ,UAAU,QACX,2BACI,0BAAMA,UAAU,yBADpB,YAGA,2BACI,0BAAMA,UAAU,wBADpB,c,0PCAZ,IA2CeK,EA3CE,WACb,IAAMC,EAAiBC,IAAH,KAUpB,OACI,kBAAC,WAAD,KACI,wBAAIP,UAAU,QAAd,YACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOQ,MAAOF,IAEN,SAACG,GAAO,IACGC,EAAwBD,EAAxBC,QAASC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,KACvB,OAAGF,EACQ,kBAAC,WAAD,KACP,yBAAKV,UAAU,YAAYa,MAAO,CAACC,WAAW,gBAAgB,kBAAC,IAAD,OAC9D,yBAAKd,UAAU,YAAYa,MAAO,CAACC,WAAW,gBAAgB,kBAAC,IAAD,CAAUC,MAAM,OAAOC,OAAQ,IAAKC,MAAI,KACtG,yBAAKjB,UAAU,YAAYa,MAAO,CAACC,WAAW,gBAAgB,kBAAC,IAAD,CAAUC,MAAM,OAAOC,OAAQ,IAAKC,MAAI,KACtG,yBAAKjB,UAAU,YAAYa,MAAO,CAACC,WAAW,gBAAgB,kBAAC,IAAD,CAAUC,MAAM,OAAOC,OAAQ,IAAKC,MAAI,MAGvGN,GAAQO,QAAQC,IAAIR,GAAe,MAE/B,kBAAC,WAAD,KAECC,EAAKQ,SAASC,KAAI,SAAA1B,GAAM,OACpB,kBAAC,EAAD,CAAYA,OAAQA,EAAQ2B,IAAK3B,EAAOC,yB,waChC5E,IAAM2B,EAAehB,IAAH,KA+EHiB,EA/DA,SAACC,GAAW,IAClB7B,EAAiB6B,EAAMC,MAAMC,OAA7B/B,cAGL,OAFAA,EAAgBgC,SAAShC,GAGrB,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAOY,MAAOe,EAAcM,UAAW,CAACjC,mBAEhC,YAA6B,IAA3Bc,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACd,GAAGF,EACC,OAAO,6BACH,wBAAIV,UAAU,kBAAiB,0BAAMA,UAAU,aAAhB,aAC/B,uBAAGA,UAAU,QACT,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBAAkB,kBAAC,IAAD,CAAUe,MAAM,OAAOC,OAAQ,GAAIC,MAAI,KACvE,wBAAIjB,UAAU,mBAAkB,kBAAC,IAAD,CAAUe,MAAM,OAAOC,OAAQ,GAAIC,MAAI,KACvE,wBAAIjB,UAAU,mBAAkB,kBAAC,IAAD,CAAUe,MAAM,OAAOC,OAAQ,GAAIC,MAAI,MAE3E,wBAAIjB,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBAAkB,kBAAC,IAAD,CAAUe,MAAM,OAAOC,OAAQ,GAAIC,MAAI,KACvE,wBAAIjB,UAAU,mBAAkB,kBAAC,IAAD,CAAUe,MAAM,OAAOC,OAAQ,GAAIC,MAAI,KACvE,wBAAIjB,UAAU,mBAAkB,kBAAC,IAAD,CAAUe,MAAM,OAAOC,OAAQ,GAAIC,MAAI,MAE3E,6BACA,kBAAC,IAAD,CAAMd,GAAG,IAAIH,UAAU,qBAAvB,UAIZ,IAAGW,EACC,CAAC,IAAD,EAC2EC,EAAKjB,OAAzEE,EADP,EACOA,aAAcD,EADrB,EACqBA,cAAeG,EADpC,EACoCA,eAAgB+B,EADpD,EACoDA,OAAQC,EAD5D,EAC4DA,YAC5D,OAAO,6BACH,wBAAI/B,UAAU,kBAAiB,0BAAMA,UAAU,aAAhB,YAA/B,IAA4EH,GAC5E,uBAAGG,UAAU,QACT,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBAAd,kBAAgDJ,GAChD,wBAAII,UAAU,mBAAd,eAA6C+B,GAC7C,wBAAI/B,UAAU,mBAAd,qBACI,0BAAMA,UAAWC,IAAW,CACxB,eAAeF,EACf,eAAeA,KAFnB,IAGMA,EAAe,MAAM,QAGnC,wBAAIC,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBAAd,cAA4C8B,EAAOE,WACnD,wBAAIhC,UAAU,mBAAd,gBAA8C8B,EAAOG,aACrD,wBAAIjC,UAAU,mBAAd,gBAA8C8B,EAAOI,cAEzD,6BACA,kBAAC,IAAD,CAAM/B,GAAG,IAAIH,UAAU,qBAAvB,UAvBFkB,QAAQC,IAAIR,QC3CxCwB,G,MAAS,IAAIC,IAAa,CAC5BC,IAAK,cAiBMC,MAdf,WACE,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACxB,kBAAC,IAAD,KACI,yBAAKnC,UAAU,aACf,yBAAKuC,IAAKC,IAAMC,IAAI,SAAS5B,MAAO,CAACE,MAAM,IAAK2B,QAAQ,QAASC,OAAQ,eACzE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,yBAAyBC,UAAWnD,QCT1CoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCbNyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.076b1e80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.950ba665.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport {Link} from 'react-router-dom'\n\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_date_local, launch_success}}) => {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission Name: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger':!launch_success\n                    })}>{mission_name}</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nconst MissionKey = () => {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"/>= Sucess\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"/>= Failed\n            </p>\n        </div>\n    )\n}\n\nexport default MissionKey\n","import React, {Fragment} from 'react'\nimport gql from 'graphql-tag'\nimport {Query} from 'react-apollo'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\nimport Skeleton from '@pedox/react-skeleton';\nimport \"@pedox/react-skeleton/dist/index.css\";\n\nconst Launches = () => {\n    const LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches{\n        flight_number,\n        mission_name,\n        launch_date_local,\n        launch_success\n      }\n    }\n    `;\n    return (\n        <Fragment>\n            <h3 className=\"my-3\">Launches</h3>\n            <MissionKey/>  \n            <Query query={LAUNCHES_QUERY}>\n                {\n                    (res)=>{\n                        const {loading, error, data} = res;\n                        if(loading) {\n                            return <Fragment>\n                            <div className=\"card mb-3\" style={{background:\"transparent\"}}><Skeleton/></div>\n                            <div className=\"card mb-3\" style={{background:\"transparent\"}}><Skeleton width=\"100%\" height={120} dark /></div>\n                            <div className=\"card mb-3\" style={{background:\"transparent\"}}><Skeleton width=\"100%\" height={120} dark /></div>\n                            <div className=\"card mb-3\" style={{background:\"transparent\"}}><Skeleton width=\"100%\" height={120} dark /></div>\n                        </Fragment>\n                        }\n                        if(error) {console.log(error); return null;}\n\n                        return <Fragment>\n                            {\n                                data.launches.map(launch => (\n                                    <LaunchItem launch={launch} key={launch.flight_number} />\n                                ))\n                            }\n                        </Fragment>\n                        }\n                }\n            </Query>\n        </Fragment>\n    )\n}\n\nexport default Launches\n","import React, {Fragment} from 'react'\nimport gql from 'graphql-tag'\nimport {Query} from 'react-apollo'\nimport {Link} from 'react-router-dom'\nimport classNames from 'classnames'\nimport Skeleton from '@pedox/react-skeleton';\nimport \"@pedox/react-skeleton/dist/index.css\";\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!){\n        launch(flight_number: $flight_number){\n            flight_number,\n            mission_name,\n            launch_success,\n            launch_year,\n            rocket{\n                rocket_name,\n                rocket_id,\n                rocket_type\n            }\n        }\n    }\n`;\n\nconst Launch = (props) => {\n    let {flight_number} = props.match.params;\n    flight_number = parseInt(flight_number);\n\n    return (\n        <Fragment>\n            <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                {\n                    ({loading, error, data}) => {\n                        if(loading){\n                            return <div>\n                                <h4 className=\"display-4 my-3\"><span className=\"text-dark\">Mission:</span></h4>\n                                <p className=\"mb-3\">\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\"><Skeleton width=\"100%\" height={20} dark /></li>\n                                        <li className=\"list-group-item\"><Skeleton width=\"100%\" height={20} dark /></li>\n                                        <li className=\"list-group-item\"><Skeleton width=\"100%\" height={20} dark /></li>\n                                    </ul>\n                                    <h3 className=\"my-3\">Rocket Details</h3>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\"><Skeleton width=\"100%\" height={20} dark /></li>\n                                        <li className=\"list-group-item\"><Skeleton width=\"100%\" height={20} dark /></li>\n                                        <li className=\"list-group-item\"><Skeleton width=\"100%\" height={20} dark /></li>\n                                    </ul>\n                                    <hr/>\n                                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                                </p>\n                            </div>\n                            }\n                        if(error){console.log(error)}\n                        else{\n                            const {mission_name, flight_number, launch_success, rocket, launch_year} = data.launch;\n                            return <div>\n                                <h4 className=\"display-4 my-3\"><span className=\"text-dark\">Mission:</span> {mission_name}</h4>\n                                <p className=\"mb-3\">\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                                        <li className=\"list-group-item\">Launch Year {launch_year}</li>\n                                        <li className=\"list-group-item\">Launch Successful: \n                                            <span className={classNames({\n                                                'text-success':launch_success,\n                                                'text-danger':!launch_success\n                                            })}> {launch_success?'Yes':'No'}</span>\n                                            </li>\n                                    </ul>\n                                    <h3 className=\"my-3\">Rocket Details</h3>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Rocket ID: {rocket.rocket_id}</li>\n                                        <li className=\"list-group-item\">Rocket Name: {rocket.rocket_name}</li>\n                                        <li className=\"list-group-item\">Rocket Type: {rocket.rocket_type}</li>\n                                    </ul>\n                                    <hr/>\n                                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                                </p>\n                            </div>\n                        }\n                    }\n                }\n            </Query>\n        </Fragment>\n    )\n}\n\nexport default Launch\n","import React from 'react';\nimport logo from './logo.png'\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from 'react-apollo'\nimport Launches from './components/Launches'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport launch from './components/Launch'\nimport './bootstrap.min.css'\n\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n        <div className=\"container\">\n        <img src={logo} alt=\"SpaceX\" style={{width:450, display:'block', margin: '20px auto'}}/>\n        <Route exact path='/' component={Launches}/>\n        <Route exact path='/launch/:flight_number' component={launch}/>\n        </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}